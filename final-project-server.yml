Description: >
    This stack is dedicated for Servers that will be created
Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  # This is the only parameter we need as we have exported this Environment name as the prefix
  # We do not need this either as we can directly us the name everywhere, but better for automation
  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
Resources:
  # Section 0 : Target Group
  # This is the most important resource. It basically defines the Target that others are using for their operation 
  # Whether it is the loadBalance for balancing or the Auto Scaling group to create or destroy servers
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      TargetGroupAttributes:
          - Key: "slow_start.duration_seconds"
            Value: "100"
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"



  # Section 1 : Load Balancer
  # This is the security group for our Load Balancer
  # Udagram communitcates on this port
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  # The Actual Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      # Where si the LB Present
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      # Security Group for LB
      SecurityGroups:
      - Ref: LBSecGroup
  # Listener for the Load Balancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  # Rule for the Listener described above
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1



  # Section 2 : Scaling Portion
  # Security group for the servers that will be created using the AutoScaling Group
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  # The profile that is provided with access to S3
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - ProjectS3ReadAccess
  # This is the launch configuration
  # Like a script to be run by the auto scaler for each instance
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
         #!/bin/bash
         apt-get update -y
         apt-get install unzip awscli -y
         apt-get install apache2 -y
         systemctl start apache2.service
         cd /var/www/html
         aws s3 cp s3://udacity-demo-1/udacity.zip .
         unzip -o udacity.zip
      # Image for Ubuntu 18.04 4GB RAM 2 CPUs 
      ImageId: ami-003634241a8fcdec0
      # Private KeyName
      KeyName: cloudformationProject
      # For access to S3
      IamInstanceProfile:
        Ref: ProfileWithRolesForOurApp
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t2.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  # The actual auto scaling group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '1'
      MaxSize: '1'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  BastionConfig:
    Type: AWS::EC2::Instance
    Properties:
      # Image for Ubuntu 18.04 4GB RAM 2 CPUs 
      ImageId: ami-003634241a8fcdec0
      SubnetId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      # Private KeyName
      KeyName: jumpboxkey
      SecurityGroupIds :
      - !GetAtt WebServerSecGroup.GroupId
      # SecurityGroups:
      # - Ref: WebServerSecGroup
      InstanceType: t2.micro
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
Outputs: 
    LB: 
        Description: URL of LoadBalance
        Value: !GetAtt WebAppLB.DNSName
        Export:
          Name: !Sub ${EnvironmentName}-LB


  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
# Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html

        #  #!/bin/bash
        #  apt-get update -y
        #  apt-get install apache2 -y
        #  systemctl start apache2.service
        #  cd /var/www/html
        #  echo "Udacity Demo Web Server Up and Running!" > index.html

# Starter code in the project section of the course
# Parameters:
# # whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
# Resources:
#   #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
#   ProfileWithRolesForOurApp:
#     Type: AWS::IAM::InstanceProfile
#     Properties: 
#       Roles:
#         - UdacityS3ReadOnlyEC2
  
#           #!/bin/bash
#           apt-get update -y
#           apt-get install unzip awscli -y
#           apt-get install apache2 -y
#           systemctl start apache2.service
#           cd /var/www/html
#           aws s3 cp s3://udacity-demo-1/udacity.zip .
#           unzip -o udacity.zip
#   Outputs: 
#   #Bonus points for useful outputs!
